<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汪震|个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aaronyard.github.io/"/>
  <updated>2019-11-28T15:38:21.052Z</updated>
  <id>https://aaronyard.github.io/</id>
  
  <author>
    <name>汪震</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上帝掷骰子吗？（一）</title>
    <link href="https://aaronyard.github.io/2019/11/28/History-of-quantum-physics-1/"/>
    <id>https://aaronyard.github.io/2019/11/28/History-of-quantum-physics-1/</id>
    <published>2019-11-28T14:53:10.000Z</published>
    <updated>2019-11-28T15:38:21.052Z</updated>
    
    <content type="html"><![CDATA[<p>回归到搭建这篇博客的初衷，我要开始写下一些关于量子物理的有趣的事情。</p><h2 id="物理学的黄金时代"><a href="#物理学的黄金时代" class="headerlink" title="物理学的黄金时代"></a>物理学的黄金时代</h2><p>一些关于在确立量子物理这个时代主题之前的事情，这个“之前”，就要从19世纪末说起了。那是物理学的黄金时代，那时还在争论光的本质到底是什么、一个科学与神共存的时代。</p><p>在那个时代，关于光的本质的问题，物理学上的大佬们喋喋不休的争论了前后几百年。两个主要派系分别主导着这场没有硝烟的战争：微粒派和波动派。</p><p>在微粒派和波动派彻底成形之前，远古以来，对于光的猜测一直没有停歇。</p><a id="more"></a><p>最初，人们猜想，光是一种从我们的眼睛里发射出去的东西，当它到达某样事物的时候，这样事物就被我们所“看见”了。恩培多克勒（Empedocles）就认为世界是由水、火、气、土四大元素组成的，而人的眼睛是女神阿芙罗狄忒（Aphrodite）用火点燃的，当火元素（也就是光。古时候往往光、火不分）从人的眼睛里喷出到达物体时，我们就得以看见事物。</p><p>到了罗马时代，学者卢克莱修（Lucretius）在《物性论》中提出，光是从光源直接到达人的眼睛的。不过当时的人们并不相信，直到公元1000多年，小孔成像的实验最终证明了这个说法是对的。</p><p>欧几里德（Euclid）、托勒密（Ptolemy）、哈桑和开普勒（Johannes Kepler）都参与研究光的性质，于是在前人的基础上，荷兰物理学家斯涅耳（W.Snell）总结出了光的折射定律了。</p><p>最后，“业余数学之王”费尔马（Pierre de Fermat）总结为“光总是走最短的路线”。</p><p>光学终于作为一门物理学科被正式确立起来，微粒派和波动派开始了无硝烟的战争。</p><p>微粒说：光是由一粒粒非常小的“光原子”所组成的，从直观上看来是很有道理的，首先它就可以很好地解释为什么光总是沿着直线前进，为什么会严格而经典地反射，甚至折射现象也可以由粒子流在不同介质里的速度变化而得到解释。</p><p>波动说：光不是一种物质粒子，而是由于介质的振动而产生的一种波。光的波动说容易解释投影里的明暗条纹，也容易解释光束可以互相穿过互不干扰。关于直线传播和反射的问题，人们很快就认识到光的波长是很短的，在大多数情况下，光的行为就犹同经典粒子一样。而衍射实验则更加证明了这一点。</p><p>但他们也有各自的缺点</p><p>微粒说很难说清为什么两道光束相互碰撞的时候不会互相弹开，人们也无法得知，这些细小的光粒子在点上灯火之前是隐藏在何处的，它们的数量是不是可以无限多，等等。</p><p>波动说有一个基本的难题，那就是任何波动都需要有介质才能够传递，那星光是怎么穿过太空的呢？于是波动说假设了一种看不见摸不着的介质“以太”（Aether）来实现光的传播。</p><h2 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h2><h3 id="“业余数学之王”费尔马”"><a href="#“业余数学之王”费尔马”" class="headerlink" title="“业余数学之王”费尔马”"></a>“业余数学之王”费尔马”</h3><p>业余玩家可以挑战职业选手吗?在数学王国,费马先生给出了答案. 费马被誉为“业余数学之王”,因为他的本职工作是一名律师,数学只是他的业余爱好.但是他在数学上的成就一点也不比职业数学家差,也远远超过了他作为律师的影响力.他当初是不是选错行了呢? 费马出生在一个富裕的家庭,家境殷实.费马的爹是一名大皮革商,为费马提供了富裕舒适的成长环境,从小就有两个家庭教师教学这种高端配置,一点也不用担心落下功课!也许正是这两位无名的家庭教师,让费马对数学有了强烈的兴趣. 数学有许许多多的分支,不可能全部都研究,费马选定了自己的主要研究方向——数论.数论是数学上一个非常坑的分支,研究的是看起来非常简单的整数.前辈们在这个领域留下了一个个精彩的猜想,任何了解整数基本运算的人都可以理解,但是要证明这些猜想却非常困难,只要证明一个就能名垂青史.这让无数有雄心壮志的人跳进了数论这个大坑,可是只有费马一个人从坑里爬了出来。</p><h3 id="以太"><a href="#以太" class="headerlink" title="以太"></a>以太</h3><p>亚里士多德所谓的“第五元素”，他认为日月星辰围绕着地球运转，但其组成却不同与地上的四大元素水火气土。天上的事物应该是完美无缺的，它们只能由一种更为纯洁的元素所构成—以太。</p><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回归到搭建这篇博客的初衷，我要开始写下一些关于量子物理的有趣的事情。&lt;/p&gt;
&lt;h2 id=&quot;物理学的黄金时代&quot;&gt;&lt;a href=&quot;#物理学的黄金时代&quot; class=&quot;headerlink&quot; title=&quot;物理学的黄金时代&quot;&gt;&lt;/a&gt;物理学的黄金时代&lt;/h2&gt;&lt;p&gt;一些关于在确立量子物理这个时代主题之前的事情，这个“之前”，就要从19世纪末说起了。那是物理学的黄金时代，那时还在争论光的本质到底是什么、一个科学与神共存的时代。&lt;/p&gt;
&lt;p&gt;在那个时代，关于光的本质的问题，物理学上的大佬们喋喋不休的争论了前后几百年。两个主要派系分别主导着这场没有硝烟的战争：微粒派和波动派。&lt;/p&gt;
&lt;p&gt;在微粒派和波动派彻底成形之前，远古以来，对于光的猜测一直没有停歇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常阅读" scheme="https://aaronyard.github.io/categories/%E6%97%A5%E5%B8%B8%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="量子物理史话" scheme="https://aaronyard.github.io/tags/%E9%87%8F%E5%AD%90%E7%89%A9%E7%90%86%E5%8F%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>3D游戏引擎初探（三）</title>
    <link href="https://aaronyard.github.io/2019/11/28/3D-Engine-3/"/>
    <id>https://aaronyard.github.io/2019/11/28/3D-Engine-3/</id>
    <published>2019-11-28T14:11:31.000Z</published>
    <updated>2019-11-28T14:14:25.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学相关知识"><a href="#数学相关知识" class="headerlink" title="数学相关知识"></a>数学相关知识</h1><p>在3D游戏引擎中会涉及到数学的相关知识，具体可以划分到线性代数：向量、矩阵、齐次坐标系、四元数。</p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>假设大家都已经对向量最基本的加法、减法、点乘、叉乘、单位化都是有了解的，简单介绍一下这些基础计算在游戏引擎中是如何应用的。</p><a id="more"></a><h3 id="向量的加法"><a href="#向量的加法" class="headerlink" title="向量的加法"></a>向量的加法</h3><p>在最开始学向量的时候大家已经知道，向量的加法遵循三角形法则和平行四边形法则，在构建游戏世界的过程中用到了向量加法的几何意义。比如游戏中怪物追击玩家的AI中，怪物知道玩家的位置，需要时时刻刻朝向玩家移动，就会在每帧运用向量的加法向玩家移动。</p><h3 id="向量的减法"><a href="#向量的减法" class="headerlink" title="向量的减法"></a>向量的减法</h3><p>向量的减法作为加法的你逆运算，集合意义也是可以用在方向的计算上，另外它还能判断两个物体之间的距离。比如游戏中怪物的追击机制有一个判断条件，那就是距离玩家大于一定的距离后才会进行追击，小于一定距离之后就不再朝向玩家移动，这是就用到了向量的减法。</p><h3 id="向量的点乘"><a href="#向量的点乘" class="headerlink" title="向量的点乘"></a>向量的点乘</h3><p>点乘主要用在了角度的计算和材质的渲染， 判断目标在自己的<strong>前后</strong>方位 。还是以怪物追击玩家为例子，刚刚只说了追击过程中的位置移动，但是怪物和玩家都是有正面朝向的，不然玩家看到怪物背对着玩家人物进行追击会觉得怪怪的，这时就需要怪物将自己的正面转向玩家。转的角度是多少呢？此时就需要用到向量的点乘进行计算了。 也能用来判断两个向量是否垂直、计算一个向量在另一个向量上的投影分量大小  。再说材质的光照渲染，通俗意义上讲就是光线照射后的明暗效果。现实世界中不规则的材质表面接受光线照射后是有不同的表现的，从数学的几何角度上来解释就是：在shader中，当材质表面的顶点法向量与光线向量的角度（即两个向量的点积）大于90度时就不接受光线的渲染，反之亦然。</p><h3 id="向量的叉乘"><a href="#向量的叉乘" class="headerlink" title="向量的叉乘"></a>向量的叉乘</h3><p>1、叉乘可以用来判断两个向量是否平行或相交。返回值为0，则平行。</p><p>2、用于求平面法线（叉乘的几何意义：absinθ）</p><p>3、计算两个物体之间形成四边形的面积（|a||b|sinθ）</p><p>4、 判断目标在自己的<strong>左右</strong>方位 </p><p>关于向量的点乘和叉乘容易混淆的问题，可以这么理解： <strong>点乘判断角度，叉乘判断方向。</strong></p><h3 id="向量的单位化"><a href="#向量的单位化" class="headerlink" title="向量的单位化"></a>向量的单位化</h3><p>向量的单位化计算的是物体间的距离，这个就不必多做介绍了。</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      带领你了解我的3D游戏引擎搭建全过程
    
    </summary>
    
    
      <category term="技术探索" scheme="https://aaronyard.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="3D Engine" scheme="https://aaronyard.github.io/tags/3D-Engine/"/>
    
  </entry>
  
  <entry>
    <title>3D游戏引擎初探（二）</title>
    <link href="https://aaronyard.github.io/2019/11/27/3D-Engine-2/"/>
    <id>https://aaronyard.github.io/2019/11/27/3D-Engine-2/</id>
    <published>2019-11-27T14:29:36.000Z</published>
    <updated>2019-11-27T14:47:21.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3D游戏引擎架构"><a href="#3D游戏引擎架构" class="headerlink" title="3D游戏引擎架构"></a>3D游戏引擎架构</h1><h2 id="最底层"><a href="#最底层" class="headerlink" title="最底层"></a>最底层</h2><p>渲染模块的图形库接口。目前游戏引擎最常用的渲染模块是微软的DirectX库或者开源跨平台的OPENGL和OPENGLES图形库。项目中使用的是Windows的GDI接口，只针对Windows操作系统。</p><h2 id="中间层"><a href="#中间层" class="headerlink" title="中间层"></a>中间层</h2><p>封装好的3D游戏引擎，可以理解为功能的控制模块。可细分为：声音模块、渲染模块、图形系统、UI系统、特效系统、管理系统、物理系统、数据系统、输入系统、内存管理。</p><h2 id="最上层"><a href="#最上层" class="headerlink" title="最上层"></a>最上层</h2><p>游戏开发人员所用到的游戏逻辑，一般情况下是调用引擎封装好的接口编写游戏所需要的逻辑。</p><a id="more"></a><h1 id="各层关系"><a href="#各层关系" class="headerlink" title="各层关系"></a>各层关系</h1><p>最底层的图形库接口关系到了整个游戏将可以在哪个平台下运行，GDI是专用于Windows平台的图形库，故而只适合在Windows中运行游戏。若想在其它平台中运行，则需要对底层的渲染模块的图形库接口做兼容。</p><p>中间层的3D游戏引擎和上层的游戏逻辑其实是相辅相成的，游戏引实质是从游戏逻辑中提取出来的共用的功能。比如unity3D、虚幻4引擎、第一家入职公司自主开发的小胖引擎等等，都是把游戏最基础的图形图像光照处理等游戏逻辑提取了出来，方便开发人员编写游戏时调用，不必在开发新游戏的前期大费周章的再次编写这些底层逻辑。从而把游戏开发的重点转移到了游戏逻辑上，大大提高的开发新游戏的效率，降低了开发新游戏所需要的周期。</p><p>由此来看，自主开发的引擎或者说开源的引擎有一个优点，在游戏逻辑开发的过程中如果发现有什么需要新加或者优化的逻辑，可以直接写在引擎中，提供给游戏逻辑层一个调用的接口即可。从根本上尽量避免代码重复，代码遵循统一的风格。所以可以说：游戏引擎为游戏逻辑的开发提供了方便，游戏逻辑的开发优化了游戏引擎的完整性。</p><h1 id="所需条件"><a href="#所需条件" class="headerlink" title="所需条件"></a>所需条件</h1><p>开发一款游戏需要什么条件呢？一共有四条。</p><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>掌握一门主流的开发语言，本项目使用的是C++语言。</p><p>这里不得不说一下C++语言的优势了</p><p>1、 C++实现了面向对象程序设计。在高级语言当中，处理运行速度是最快的，大部分的游戏软件，系统都是由C++来编写的。</p><p>2、 C++语言非常灵活，功能非常强大。如果说C语言的优点是指针，那么C++的优点就是性能和类层次结构的设计。</p><p>3、C++非常严谨、精确和数理化，标准定义很细致。</p><p>4、 C++语言的语法思路层次分明、相呼应;语法结构是显式的、明确的。</p><p>当然，这只是C++的一部分优势，在运用过程中，我们会逐渐发现C++语言之美。</p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><p>在开发引擎的过程中，数学同样很重要。线性代数在游戏的开发过程中可以灵活的解决3D固定流水线中的大部分操作，物体的移动。旋转、缩放、光照等都运用到了数学原理。</p><h2 id="GPU编程语言"><a href="#GPU编程语言" class="headerlink" title="GPU编程语言"></a>GPU编程语言</h2><p>3D游戏引擎的核心功能就是对游戏的场景渲染和物体的材质渲染，对材质中有Alpha通道的要做特殊处理（Alpha通道是材质有透明的部分）。移动端为了减少透明材质的消耗，会通过GPU编程在shader中处理，比如unity项目中一般会把有Alpha通道的图片切割为无Alpha通道和有Alpha通道的图片，通过shader编程将其再合在一起，还有场景渲染使用的后处理效果，模型的选中效果等，都是与GPU编程息息相关的，至少需要了解和使用GPU编程语言中的一种，目前有GLSL、HLSL、CG等。</p><h2 id="图形学算法"><a href="#图形学算法" class="headerlink" title="图形学算法"></a>图形学算法</h2><p>逼真的效果需要适合的图形学算法，比如水的波纹的模拟中用到的波动方程，刚体碰撞效果等，都会用到图形学算法。</p><h1 id="先后顺序"><a href="#先后顺序" class="headerlink" title="先后顺序"></a>先后顺序</h1><p>会从最基础最底层的知识开始学习了解：</p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><p>游戏世界所运用到的线性代数的相关知识，领略数学之美。</p><h2 id="材质和光照"><a href="#材质和光照" class="headerlink" title="材质和光照"></a>材质和光照</h2><p>我们就是游戏中创造万物的造物主，首先创造什么？当然是光啦！</p><h2 id="固定流水线"><a href="#固定流水线" class="headerlink" title="固定流水线"></a>固定流水线</h2><p>晶体管中的二进制数据是如何渲染到屏幕上供我们所观看呢？固定流水线会为你解密这一切。</p><h2 id="游戏引擎架构"><a href="#游戏引擎架构" class="headerlink" title="游戏引擎架构"></a>游戏引擎架构</h2><p>将功能模块进行细分，分步实现，为下一步的整合做好前期准备。</p><h2 id="3D游戏引擎的底层架构和封装"><a href="#3D游戏引擎的底层架构和封装" class="headerlink" title="3D游戏引擎的底层架构和封装"></a>3D游戏引擎的底层架构和封装</h2><p>用计算机语言实现每个功能模块，享受制作引擎工具的乐趣，这就是你手中的模板，用它就能创造一个又一个不同的游戏世界。</p><h2 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h2><p>引擎已经搭建完毕了，那么下一步就是进一步搭建可以与玩家互动的游戏世界啦。</p>]]></content>
    
    <summary type="html">
    
      带领你了解我的3D游戏引擎搭建全过程
    
    </summary>
    
    
      <category term="技术探索" scheme="https://aaronyard.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="3D Engine" scheme="https://aaronyard.github.io/tags/3D-Engine/"/>
    
  </entry>
  
  <entry>
    <title>3D游戏引擎初探（一）</title>
    <link href="https://aaronyard.github.io/2019/11/24/3D-Engine-1/"/>
    <id>https://aaronyard.github.io/2019/11/24/3D-Engine-1/</id>
    <published>2019-11-24T15:52:45.000Z</published>
    <updated>2019-11-27T14:47:36.167Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子，我用C++编写的3D游戏引擎成功的运行了一个小游戏demo，在此将会分享我的学习与搭建历程。</p><p>该3D引擎是跟着书籍《手把手教你架构3D游戏引擎》学习搭建的，由浅入深的讲解以及范例，令我受益匪浅。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>底层运用c++编写，图形接口为GDI（windows下的图形接口，不可跨平台。），模型材质运用的3D max制作，用通用的shader语法解析模型，渲染管线的一些列流程利用了矩阵的数学知识。</p><p>项目结构分为三部分：ECore核心模块，EEngine功能模块，EGame游戏模块。</p><a id="more"></a><h2 id="本地化操作"><a href="#本地化操作" class="headerlink" title="本地化操作"></a>本地化操作</h2><p>书籍中的编辑器是VS2013版，而我在学习的时候使用的是最新版的VS2019，跟着作者学习编写了所有代码，亲测可用，大家可以放心的编写学习啦。</p><h2 id="材质地形编辑器"><a href="#材质地形编辑器" class="headerlink" title="材质地形编辑器"></a>材质地形编辑器</h2><p>书籍中对于材质地形编辑器的描述相当的少，我会在后期详细的描述材质地形是如何编辑的。</p><h2 id="个人提升"><a href="#个人提升" class="headerlink" title="个人提升"></a>个人提升</h2><p>写本博客是必不可少的会重新过一遍书籍以及整合自身所学知识，算是对自己的再一次沉淀和查漏补缺。</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>对数据结构的理解上升了，图形学算法也有查找资料与编写demo的过程中有所了解和应用，学会了进行场景渲染以及物体的材质渲染，对于渲染管线以及传说中的shader不再陌生，也因此具备了宏观上的一些架构能力，对游戏的整体架构有了一定的认识。最重要的是也因此对我自身工作中所用的unity引擎有了更深层次的了解。</p>]]></content>
    
    <summary type="html">
    
      带领你了解我的3D游戏引擎搭建全过程
    
    </summary>
    
    
      <category term="技术探索" scheme="https://aaronyard.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="3D Engine" scheme="https://aaronyard.github.io/tags/3D-Engine/"/>
    
  </entry>
  
  <entry>
    <title>博客建站</title>
    <link href="https://aaronyard.github.io/2019/11/24/Hexo-blog/"/>
    <id>https://aaronyard.github.io/2019/11/24/Hexo-blog/</id>
    <published>2019-11-24T05:44:07.000Z</published>
    <updated>2019-11-24T11:20:46.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h1><p><a href="http://www.jiangxinlingdu.com/" target="_blank" rel="noopener">匠心零度</a>：看了匠心零度的博客，我才下定决心要做一个自己的博客，理由太充分了。</p><p><a href="https://haoji.me/" target="_blank" rel="noopener">小茗同学</a>：博客的建立，基础的工作都是按照小茗同学的教程来做的，很详细。</p><p><a href="https://www.cnkirito.moe/" target="_blank" rel="noopener">徐靖峰</a>：最终的博客主题确定为徐靖峰的博客主题，联系上后告知了<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/" target="_blank" rel="noopener">相关主题</a>以及<a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">主题出处</a>。</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>AaronYard：<a href="https://aaronyard.github.io/">https://aaronyard.github.io/</a></p><p>欢迎各位来到我的博客考察~👏👏👏</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>在开始一切之前，你必须已经：</li></ul><p>有一个github账号，没有的话去注册一个；</p><p>安装了node.js、npm，并了解相关基础知识；</p><p>安装了git for windows（或者其它git客户端）</p><p>配置好了相关的环境变量。</p><ul><li>本文所使用的环境：</li></ul><p>Windows 10</p><p>node.js @12.13.1</p><p>Github Desktop @2.2.3</p><p>hexo @4.0.0</p><h2 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h2><p>在Github中新建一个名为 <em>你的用户名.github.io</em> 的仓库，例如你的GitHub用户名为example，则仓库名为 <em>example.github.io</em> ，这样，将来你的网站访问地址就是 <a href="http://example.github.io" target="_blank" rel="noopener">http://example.github.io</a> 了。</p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>SSH key解决了本地和服务器的连接问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git命令行。不要着急，按照如下指令做。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"Github注册邮箱"</span></span><br></pre></td></tr></table></figure><p>接着连续3次回车后，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的GitHub主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，title随意填写，将刚刚复制的内容粘贴到key中。</p><p>验证是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com // 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>在弹出的 <em>Are you sure you want to continue connecting (yes/no)?</em> 后输入yes。</p><p>若显示 <em>Hi ***! You’ve successfully authenticated, but GitHub does not provide shell access.</em> 则表明SSH配置成功。</p><p>接着输入如下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"xxx"</span>// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  <span class="string">"xxx@xxx.com"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>如果遇到git非内外部指令的情况，则说明你没有为git配置环境变量，GitHub Destop的环境变量路径可参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\AaronEN\AppData\Local\GitHubDesktop\app-2.2.3\resources\app\git\cmd</span><br></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a></h2><p>类型：静态网页</p><p>特点：速度快、部署简单、免费、结合github pages、支持markdown、内容布局自定义功能强.</p><p>Hexo是一款基于node.js开发的博客程序，拥有简单的服务器，可用作简单的动态博客使用。也有生成器，生成的静态文件可以一键部署到Github Pages上，也可以部署到任意静态文件服务器上。它相当简约，并且可使用Markdown来编写文章！我的个人博客就是基于hexo生成的。很多网友对hexo的最深刻印象就是速度快和部署简单了。一个个人博客最核心的功能支持的非常好，你可以专心的写一些技术文章部署到上面了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>找个目录存放你的项目代码，例如我的是 <em>D:\AaronYard</em> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d/AaronYard/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>初始化后的项目会自带一个主题，此时可以生成一个可以预览的网站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>在浏览器中输入 <em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em>，就可以浏览你的网站了。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>当然啦，我们并不满足于官方提供的主题，此时就可以去寻觅自己喜欢的主题啦。</p><p>官方提供的主题网站：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>我的网站的主题是<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/" target="_blank" rel="noopener">hexo-theme-icarus</a></p><p>接下来就是下载主题的时刻啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d/AaronYard/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/hexo-theme-icarus</span><br></pre></td></tr></table></figure><p>下载的主题会放在themes目录下，修改根目录下<em>_config.yml</em>中的<em>theme: landscape</em>改为<em>theme: hexo-theme-icarus</em>，然后重新执行hexo g来重新生成。</p><p>注意主题中的<em>_config.yml</em>也是需要修改的，对此有点基础的摸索片刻后就会修改了。</p><p>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</p><h2 id="提交GitHub"><a href="#提交GitHub" class="headerlink" title="提交GitHub"></a>提交GitHub</h2><p>在辛苦并快乐着的搭建工作之后，就可以愉快的将博客提交到GitHub中了。</p><p>配置根目录下<em>_config.yml</em>中有关<em>deploy</em>的部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:example/example.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>提交本次改动的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>至此，个人博客的框架搭建完成，还需要内容的扩充。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>定位到项目的根目录，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"hello-world"</span></span><br></pre></td></tr></table></figure><p>hexo会帮我们在_posts目录下生成相关md文件<br>md文件的目录结构一般如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName <span class="comment">#文章页面上的显示名称，一般是中文</span></span><br><span class="line">date: 2019-11-24 13:44:07 <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line">categories: 默认分类 <span class="comment">#分类</span></span><br><span class="line">tags: [tag1,tag2,tag3] <span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><p>编写md文件后执行hexo g与hexo s即可浏览博客，若满意就可以hexo d愉快的提交博客啦。</p><h2 id="写博客的工具"><a href="#写博客的工具" class="headerlink" title="写博客的工具"></a>写博客的工具</h2><p>关于写博客的工具，我用的是markdown editor，非常好用，左侧编写，右侧实时展现效果。编写的语法可参见<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">hexo官方写作Wiki</a>。</p><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#缩写</span></span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment">#组合命令</span></span><br><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>我博客右下方有一只unitychan，很有趣吧，是基于live2d技术做的，感兴趣的可以<a href="https://www.jianshu.com/p/89440678ee3c" target="_blank" rel="noopener">点击此处</a>学习搭建。</p>]]></content>
    
    <summary type="html">
    
      带领你了解hexo+git是如何进行博客建站的
    
    </summary>
    
    
      <category term="技术探索" scheme="https://aaronyard.github.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="博客建站" scheme="https://aaronyard.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>我的个人博客开通啦</title>
    <link href="https://aaronyard.github.io/2019/11/23/MyHexo/"/>
    <id>https://aaronyard.github.io/2019/11/23/MyHexo/</id>
    <published>2019-11-23T14:44:14.000Z</published>
    <updated>2019-11-24T15:41:21.659Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎您来到我的 <a href="https://aaronyard.github.io/">个人博客</a>！点击此处进入我的<a href="https://github.com/AaronYard" target="_blank" rel="noopener">GitHub</a>个人账户。</p><p>虽说大学期间有为学院写过一个学院网站，但是懵懵懂懂，并不知道从搭建一个网站到可以外网访问的完整流程。所以从某种意义上来讲，这是我第一次搭建完成一个完整的网站，我将它作为我的个人博客（容我小得瑟一下，嘻嘻），此博客是基于Hexo与Git生成的网站，之后有时间了我会写一篇详细的搭建教程供各位参考。</p><a id="more"></a><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>毕业于师范大学数学系，大学期间，我发现对于计算机的兴趣远大于数学带给我的快感，所以像老师申请了计算机实验室，在其中学习成长。在学院老师和同学的帮助下，我成立了团工委网络部，申请了微信公众号，从此开始了我的计算机探索之旅。</p><p>承蒙老师厚爱，我在北京实习参加工作，大三暑期开始在完美世界旗下子公司实习游戏客户端岗位，毕业后成功转正。因想稳定下来，目前回到家中，进入了另一家游戏公司继续成长。</p><p>三年的工作时间，令我从一个什么都不懂的毛头小子蜕变成了一个敢想敢干的小程序猿。为了弄明白3D游戏的原理，通过查资料以及实践，用C++编写了一个基于GDI的简易的完整3D引擎，并且为这个引擎写了一个游戏小demo，游戏成功运行的那一刻，我终于明白了什么是实践出真知。今天，这个小程序猿，又开始了想象之旅。</p><h2 id="建站灵感"><a href="#建站灵感" class="headerlink" title="建站灵感"></a>建站灵感</h2><p> 一开始没有想过要搭建一个网站啦，早上的时候看了知乎的一篇文章，里面介绍了一些让我很感兴趣的读物，我想从其中的一本书《上帝掷骰子吗？─量子物理史话》开始阅读，并且写下我的读书心得。</p><p>于是，我下载了这本书的电子版本当我阅读后想写读书心得时，突然意识到没有一个合适的网站供我书写。也许搭建一个个人博客是个不错的选择呢！毕竟我可以学习怎么搭建嘛，于是对互联网有一些了解的我，开始了漫长的建站之旅。</p><h2 id="不断尝试"><a href="#不断尝试" class="headerlink" title="不断尝试"></a>不断尝试</h2><p>通过对互联网服务器的一些了解，我将自己的笔记本当作服务器，运行了Tomcat，利用花生壳的内网穿透功能，捣鼓了一波家中的路由器，成功的在外网访问到了内网的网站。</p><p>但是这远远不够，我还需要一个适合我的网站管理系统，最终我找到了这个hexo，简直神器，完全不需要我进行内网穿透嘛！！而且基于git管理，网站管理方便，支持MarkDown编写，简直满足了我的一切需求。</p><h2 id="今日心得"><a href="#今日心得" class="headerlink" title="今日心得"></a>今日心得</h2><p>新技能Get√</p><p>终于把个人博客有模有样的捣鼓出来了，我可以在以后的日子里专心的写读书心得啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎您来到我的 &lt;a href=&quot;https://aaronyard.github.io/&quot;&gt;个人博客&lt;/a&gt;！点击此处进入我的&lt;a href=&quot;https://github.com/AaronYard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;个人账户。&lt;/p&gt;
&lt;p&gt;虽说大学期间有为学院写过一个学院网站，但是懵懵懂懂，并不知道从搭建一个网站到可以外网访问的完整流程。所以从某种意义上来讲，这是我第一次搭建完成一个完整的网站，我将它作为我的个人博客（容我小得瑟一下，嘻嘻），此博客是基于Hexo与Git生成的网站，之后有时间了我会写一篇详细的搭建教程供各位参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="个人随笔" scheme="https://aaronyard.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="新技能Get√" scheme="https://aaronyard.github.io/tags/%E6%96%B0%E6%8A%80%E8%83%BDGet%E2%88%9A/"/>
    
  </entry>
  
</feed>
